// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Order entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Order must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Order", id.toString(), this);
    }
  }

  static load(id: string): Order | null {
    return changetype<Order | null>(store.get("Order", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get exchangeContractAddress(): string | null {
    let value = this.get("exchangeContractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set exchangeContractAddress(value: string | null) {
    if (!value) {
      this.unset("exchangeContractAddress");
    } else {
      this.set("exchangeContractAddress", Value.fromString(<string>value));
    }
  }

  get makerAddress(): string | null {
    let value = this.get("makerAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set makerAddress(value: string | null) {
    if (!value) {
      this.unset("makerAddress");
    } else {
      this.set("makerAddress", Value.fromString(<string>value));
    }
  }

  get takerAddress(): string | null {
    let value = this.get("takerAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set takerAddress(value: string | null) {
    if (!value) {
      this.unset("takerAddress");
    } else {
      this.set("takerAddress", Value.fromString(<string>value));
    }
  }

  get contractAddress(): string | null {
    let value = this.get("contractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contractAddress(value: string | null) {
    if (!value) {
      this.unset("contractAddress");
    } else {
      this.set("contractAddress", Value.fromString(<string>value));
    }
  }

  get saleSide(): i32 {
    let value = this.get("saleSide");
    return value!.toI32();
  }

  set saleSide(value: i32) {
    this.set("saleSide", Value.fromI32(value));
  }

  get saleKind(): i32 {
    let value = this.get("saleKind");
    return value!.toI32();
  }

  set saleKind(value: i32) {
    this.set("saleKind", Value.fromI32(value));
  }

  get paymentTokenAddress(): string | null {
    let value = this.get("paymentTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set paymentTokenAddress(value: string | null) {
    if (!value) {
      this.unset("paymentTokenAddress");
    } else {
      this.set("paymentTokenAddress", Value.fromString(<string>value));
    }
  }

  get basePrice(): BigInt | null {
    let value = this.get("basePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set basePrice(value: BigInt | null) {
    if (!value) {
      this.unset("basePrice");
    } else {
      this.set("basePrice", Value.fromBigInt(<BigInt>value));
    }
  }
}
